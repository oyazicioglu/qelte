@use '../styles/theme/theme';
@use '../styles/theme/mixins' as globalMixins;
@use '../styles/theme/variables' as themeVariables;

@mixin default {
	color: inherit;
	position: relative;
	margin: 0;
	cursor: pointer;
	text-align: center;
	border: none;
	font-size: inherit;
	display: grid;
	align-items: center;
	justify-content: center;
	overflow: hidden;
}

@mixin elementSize($size) {
	@if $size == 'extra-small' {
		height: #{themeVariables.$extraSmallHeight}px;
		min-height: #{themeVariables.$extraSmallHeight}px;
		width: #{themeVariables.$extraSmallHeight}px;
		min-width: #{themeVariables.$extraSmallHeight}px;
	} @else if $size == 'small' {
		height: #{themeVariables.$smallHeight}px;
		min-height: #{themeVariables.$smallHeight}px;
		width: #{themeVariables.$smallHeight}px;
		min-width: #{themeVariables.$smallHeight}px;
	} @else if($size == 'default') {
		height: #{themeVariables.$defaultHeight}px;
		min-height: #{themeVariables.$defaultHeight}px;
		width: #{themeVariables.$defaultHeight}px;
		min-width: #{themeVariables.$defaultHeight}px;
	} @else if($size == 'large') {
		height: #{themeVariables.$largeHeight}px;
		min-height: #{themeVariables.$largeHeight}px;
		width: #{themeVariables.$largeHeight}px;
		min-width: #{themeVariables.$largeHeight}px;
	} @else if($size == 'extra-large') {
		height: #{themeVariables.$extraLargeHeight}px;
		min-height: #{themeVariables.$extraLargeHeight}px;
		width: #{themeVariables.$extraLargeHeight}px;
		min-width: #{themeVariables.$extraLargeHeight}px;
	}
}

@mixin basic() {
	@include default();
	background: transparent;
	border: 1px solid transparent;

	&:not(:disabled).btn-color-default {
		color: map-get($map: theme.$themeColors, $key: 'primaryText');
	}

	&:not(:disabled).btn-color-primary {
		color: map-get($map: theme.$primaryColors, $key: 'bg');
	}

	&:not(:disabled).btn-color-secondary {
		color: map-get($map: theme.$primaryColors, $key: 'secondaryText');
	}

	&:not(:disabled).btn-color-accent {
		color: map-get($map: theme.$accentColors, $key: 'bg');
	}

	&:not(:disabled).btn-color-warning {
		color: map-get($map: theme.$alertColors, $key: 'warning');
	}

	&:not(:disabled).btn-color-success {
		color: map-get($map: theme.$alertColors, $key: 'success');
	}

	&:not(:disabled).btn-color-info {
		color: map-get($map: theme.$alertColors, $key: 'info');
	}

	&:not(:disabled).btn-color-danger {
		color: map-get($map: theme.$alertColors, $key: 'danger');
	}

	&:disabled {
		background-color: transparent;
		color: map-get($map: theme.$themeColors, $key: 'disabledText');
	}
}

@mixin flat() {
	@include default();
	color: map-get($map: theme.$themeColors, $key: 'primaryText');
	background-color: map-get($map: theme.$themeColors, $key: 'paper');

	&:not(:disabled).btn-color-secondary {
		background-color: map-get($map: theme.$themeColors, $key: 'paper');
		color: map-get($map: theme.$primaryColors, $key: 'secondaryText');
	}

	&:not(:disabled).btn-color-primary {
		background-color: map-get($map: theme.$primaryColors, $key: 'bg');
		color: map-get($map: theme.$primaryColors, $key: 'fg');
	}

	&:not(:disabled).btn-color-accent {
		background-color: map-get($map: theme.$accentColors, $key: 'bg');
		color: map-get($map: theme.$accentColors, $key: 'fg');
	}

	&:not(:disabled).btn-color-warning {
		background-color: map-get($map: theme.$alertColors, $key: 'warning');
		color: white;
	}

	&:not(:disabled).btn-color-success {
		background-color: map-get($map: theme.$alertColors, $key: 'success');
		color: white;
	}

	&:not(:disabled).btn-color-info {
		background-color: map-get($map: theme.$alertColors, $key: 'info');
		color: white;
	}

	&:not(:disabled).btn-color-danger {
		background-color: map-get($map: theme.$alertColors, $key: 'danger');
		color: white;
	}

	&:disabled {
		background-color: map-get($map: theme.$themeColors, $key: 'disabled');
		color: map-get($map: theme.$themeColors, $key: 'disabledText');
	}
}

@mixin stroked() {
	@include basic();
	border: 1px solid map-get($map: theme.$themeColors, $key: 'stroke');
}

@mixin raised() {
	@include flat();
	@include globalMixins.elevations(3);
}
